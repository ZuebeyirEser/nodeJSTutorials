

const {readFile} = require('fs');
console.log('Started first task');

readFile('./content/first.txt', 'utf-8', (err, result) => {
    if (err) {
        console.log(err);
        return; // Exit the function early if there's an error
    }
    console.log(result);
    console.log('completed first task');
});

console.log('starting next task');

//  output of the code is as follows 
/*
Started first task
starting next task
hello this is first text file.
completed first task
 */

// we know that readFile is async

// next example 

console.log('first');
setTimeout(() => {
    console.log('second');
}, 0);

console.log('third');

// we can see the execution of the each code 
// code output
/*
Started first task
starting next task
first
third
second
hello this is first text file.
completed first task
*/

setInterval(() =>  {
    console.log('Hello World');
}, 2000);

console.log('I will run first');
/*
The setInterval function itself is synchronous; however, the callback function passed to setInterval runs asynchronously.
The output will be:
I will run first

Here's what happens:

    The setInterval function is called, which schedules the execution of the arrow function 
    (() => { console.log('Hello World'); }) every 2000 milliseconds (2 seconds). 
    This scheduling is done in the background, but it doesn't block the subsequent code execution.

    The console.log('I will run first'); statement is executed immediately after setInterval, 
    as it's synchronous and not dependent on the callback function inside setInterval.

    After the initial setup, the callback function inside setInterval starts executing every 2 seconds asynchronously, 
    printing "Hello World" to the console.

    So, while the setup of setInterval is synchronous, the execution of the callback function within it is asynchronous, 
    allowing other code to continue running in parallel.

 */
const http = require('http');
const server = http.createServer((req, res)=>{
    console.log('request event');
    res.end('Hello World');
});
server.listen(4000, () => {
    console.log('server listening on port: 4000...');
});
/*
The .listen() method does not block the execution of above code; 
it starts the server asynchronously and continues executing the subsequent code. 
The server starts listening for connections in the background, and 
the provided callback function is invoked when the server is ready to accept connections.

Therefore, .listen() operates asynchronously to ensure that your server setup doesn't delay 
the execution of other code in your application. 
This is crucial for ensuring that your Node.js application remains responsive and 
capable of handling other tasks while it listens for incoming connections.

*/

// HTTP SERVER
const http = require('http');
const server = http.createServer((req, res)=>{
    console.log('request event');
    res.end('Hello World');
});
server.listen(4000, () => {
    console.log('server listening on port: 4000...');
});
/*
    The .listen() method does not block the execution of above code; 
    it starts the server asynchronously and continues executing the subsequent code. 
    The server starts listening for connections in the background, and 
    the provided callback function is invoked when the server is ready to accept connections.

    Therefore, .listen() operates asynchronously to ensure that your server setup doesn't delay 
    the execution of other code in your application. 
    This is crucial for ensuring that your Node.js application remains responsive and 
    capable of handling other tasks while it listens for incoming connections.

*/
